Data Binding Techniques in Angular(Data sharing in components)
-------------------------------------------------------

html-- view
ts  -- component


1. One way Binding
-------------------
1.1  component to view data sharing
    1.1.1  STRING INTERPOLLATION  {{}}
        to display string directly from ts to html .
    1.1.2 property binding        [property]=""
        if we want to share data from ts to view as a value of any property, then 
        attribute/prpperty name will be given inside the'[]' 
1.2  view to component data sharing
    1.2.1  event binding (event)="method()"
              the event will be specified in the view and when that event is woking whichever event is to be called 
              will be invoked.

    1.2.2  event binding using $event(event)=method($event)
                if we want to access any data/value from the html page along with the event we can use this 
    1.2.3  Event binding with template rendering variable #varia                    

2. Two Way Binding
-------------------

    2.1 ngModel       [ngModel]="property"     FormsModule (import tz library)

Redirection in Angular
-----------------------
Module -- AppRoutingModule
Router -- a class used to redirect                     dashboard=package   dashboard.component.css=module  
methods-- navigateByUrl                          inside package->module->class->methods & variables


Dependency Injection
---------------------
to share data from one class to another class.it is done inside constructor. for that we require 2 
access_specifiers

1.private -- can be used only within the specified class
2.public  -- can be used  within that package
inside constructor

access_specifiers reference:ClassName
to call----- reference.method

Angular Services
----------------
to store redentent data and methods
-all the components can access the data and methods defined in service file easily


        ng g s service_name


Angular Directives - to manipulate/change  DOM 
------------------

1.component Directives
when a component is created DOM is changed(an extra html page is added). such are component Directives

2.Structural Directives
*ngFor     (for loop) an extra row is added.
sometimes we need to perform iteration in objects or collections in the html page

3.attribute directive     eg) [ngClass]
to applies a class on a component.based on a condition to display a class or not.


Validation in angular
----------------------

form creation in angular

    1.template driven form - first create the form using html tag and then validate the code using extra code
    2.Model driven  form -we can easily validate the form.we create a model of the form.so along with the model 
      we can perform validation and data-binding


            2.1 reactive form-- used to create model of form

                reactive form conatains- a group,array and a control

                -ReactiveFormsModule - The module used to create reactive form.
                -FormBuilder         - class used to build model form
                -group()             - method to create model


local Storage in angular
-------------------------

localStorage.getItem()----to get elements
localStorage.setItem()----to store elements
localStorage.removeItem()--to delete data

ty - json ---- stringify
json - ty ------ parse

Parent Child Components Communication
---------------------------------------

@Input --  parent to child data sharing
@Output -- child to parent data sharing


Event Creation In Angular
--------------------------

we can create our own events in angular projects

EventEmitter - class used to create userdefined events


                eventname=new EventEmitter() --creating event
                emit()                       --method to determine when to start the event. i.e; time specify



Date and TIme In angular
-------------------------

class---- Date

Angular Pipes
--------------
to convert data into another format 
datepipes


API creations in Angular
------------------------

HttpClientModule  - module to create web api calls

HttpClients       - class inside HttpClientModule

folder     file    class    methods
package    modules  class   methods


Asynchronous code handling in ts
--------------------------------

js - promise - resolve  then()
             - reject   catch()


ts - observable - resolve  subscribe()
                - reject    catch()